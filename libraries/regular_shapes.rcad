/*
 *  RapCAD Shapes Library (www.rapcad.org)
 *  Copyright (C) 2010-2021 Giles Bathgate
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

/*********************************
 * 2D regular shapes
 */

module reg_polygon(sides,radius)
{
  if(sides>2)
    circle(r=radius,$fn=sides);
  else
    echo("Sides must be greater than 2");
}

module triangle(radius)
{
   reg_polygon(3,radius);
}

module pentagon(radius)
{
  reg_polygon(5,radius);
}

module hexagon(radius)
{
  reg_polygon(6,radius);
}

module heptagon(radius)
{
  reg_polygon(7,radius);
}

module octagon(radius)
{
  reg_polygon(8,radius);
}

module nonagon(radius)
{
  reg_polygon(9,radius);
}

module decagon(radius)
{
  reg_polygon(10,radius);
}

module hendecagon(radius)
{
  reg_polygon(11,radius);
}

module dodecagon(radius)
{
  reg_polygon(12,radius);
}

module tridecagon(radius)
{
  reg_polygon(13,radius);
}

module tetradecagon(radius)
{
  reg_polygon(14,radius);
}

module pentadecagon(radius)
{
  reg_polygon(15,radius);
}

module hexadecagon(radius)
{
  reg_polygon(16,radius);
}

/*********************************
 * 3D regular shapes
 */

module cone(height,radius,center=false)
{
  cylinder(h=height,r1=radius,r2=0,c=center);
}

module oval_prism(height,rx,ry,c=false)
{
  scale([1,rx/ry,1])
    cylinder(h=height,r=ry,c=center);
}

module oval_tube(height,rx,ry,wall,center=false)
{
  difference() {
    scale([1,ry/rx,1])
      cylinder(h=height,r=rx,c=center);
    scale([(rx-wall)/rx,(ry-wall)/rx,2])
      translate([0,0,-height/4])
        cylinder(h=height,r=rx,c=center);
  }
}

module cylinder_tube(height,radius,wall,center=false)
{
  tubify(radius,wall,height)
    cylinder(h=height,r=radius,c=center);
}

/**
* Tubifies any regular prism
*/
module tubify(radius,wall,height)
{
  difference() {
    child(0);
    scale([(radius-wall)/radius,(radius-wall)/radius,2])
      translate([0,0,-height/4])
        child(0);
  }
}

module triangle_prism(height,radius)
{
  linear_extrude(h=height)
    triangle(radius);
}

module triangle_tube(height,radius,wall)
{
   tubify(radius,wall,height)
    triangle_prism(height,radius);
}

module pentagon_prism(height,radius)
{
  linear_extrude(h=height)
    pentagon(radius);
}

module pentagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    pentagon_prism(height,radius);
}

module hexagon_prism(height,radius) 
{
  linear_extrude(h=height)
    hexagon(radius);
}

module hexagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    hexagon_prism(height,radius);
}

module heptagon_prism(height,radius) 
{
  linear_extrude(h=height)
    heptagon(radius);
}

module heptagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    heptagon_prism(height,radius);
}

module octagon_prism(height,radius) 
{
  linear_extrude(h=height)
    octagon(radius);
}

module octagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    octagon_prism(height,radius);
}

module nonagon_prism(height,radius)
{
  linear_extrude(h=height)
    nonagon(radius);
}

module nonagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    nonagon_prism(height,radius);
}

module decagon_prism(height,radius)
{
  linear_extrude(h=height)
    decagon(radius);
}

module decagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    decagon_prism(height,radius);
}

module hendecagon_prism(height,radius)
{
  linear_extrude(h=height)
    hendecagon(radius);
}

module hendecagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    hendecagon_prism(height,radius);
}

module dodecagon_prism(height,radius)
{
  linear_extrude(h=height)
    dodecagon(radius);
}

module dodecagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    dodecagon_prism(height,radius);
}

module tridecagon_prism(height,radius)
{
  linear_extrude(h=height)
    tridecagon(radius);
}

module tridecagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    tridecagon_prism(height,radius);
}

module tetradecagon_prism(height,radius)
{
  linear_extrude(h=height)
    tetradecagon(radius);
}

module tetradecagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    tetradecagon_prism(height,radius);
}

module pentadecagon_prism(height,radius)
{
  linear_extrude(h=height)
    pentadecagon(radius);
}

module pentadecagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    pentadecagon_prism(height,radius);
}

module hexadecagon_prism(height,radius)
{
  linear_extrude(h=height)
    hexadecagon(radius);
}

module hexadecagon_tube(height,radius,wall)
{
  tubify(radius,wall,height)
    hexadecagon_prism(height,radius);
}

module torus(outerRadius,innerRadius)
{
  r=(outerRadius-innerRadius)/2;
  rotate_extrude()
    translate([innerRadius+r,0,0])
      circle(r);
}

module triangle_pyramid(radius)
{
  o=sin30(radius);
  a=cos30(radius);
  polyhedron(points=[[-a,-o,-o],[a,-o,-o],[0,radius,-o],[0,0,radius]],surfaces=[[0,1,2],[1,2,3],[0,1,3],[0,2,3]]);
}

module square_pyramid(width,depth,height)
{
  w=width/2;
  d=depth/2;
  polyhedron(points=[[-w,-d,0],[-w,d,0],[w,d,0],[w,-d,0],[0,0,height]],surfaces=[[0,3,2,1],[0,1,4],[1,2,4],[2,3,4],[3,0,4]]);
}

module rounded_cube(width,depth,height,diameter)
{
  hull() {
    sphere(d=diameter);
    translate([0,height,depth])sphere(d=diameter);
    translate([width,0,depth])sphere(d=diameter);
    translate([width,height,0])sphere(d=diameter);
    translate([width,height,depth])sphere(d=diameter);
    translate([0,0,depth])sphere(d=diameter);
    translate([width,0,0])sphere(d=diameter);
    translate([0,height,0])sphere(d=diameter);
  }
}
