<input> ::=
	<bom> <declarations>
	| <declarations>

<declarations> ::=
	<empty>
	| <use_declaration> <declarations>
	| <import_declaration> <declarations>
	| <single_declaration_list>

<codedoc> ::=
	"/**" <codedoc_param> "*/"

<codedoc_param> ::=
	<empty>
	| <doctext> <codedoc_param>
	| "@" <doctext> <codedoc_param>

<use_declaration> ::=
	"use"
	| "use" "as" <identifier> ';'

<import_declaration> ::=
	"import" "as" <identifier> ';'
	| "import" "as" <identifier> '(' <parameters> ')' ';'

<single_declaration_list> ::=
	<single_declaration>
	| <single_declaration_list> <single_declaration>

<declaration_list> ::=
	<declaration>
	| <declaration_list> <declaration>

<compound_declaration> ::=
	'{' '}'
	| '{' <declaration_list> '}'

<single_declaration> ::=
	<single_statement>
	| <define_declaration>
	| <codedoc>

<declaration> ::=
	<statement>
	| <define_declaration>

<define_declaration> ::=
	"module" <identifier> '(' <parameters> ')' <module_scope>
	| "function" <identifier> '(' <parameters> ')' <function_scope>

<module_scope> ::=
	<compound_declaration>
	| <module_instance>

<function_scope> ::=
	'=' <expression> ';'
	| <compound_statement>

<statement> ::=
	<single_statement>
	| <compound_statement>

<single_statement> ::=
	<module_instance>
	| <assign_statement> ';'
	| <ifelse_statement>
	| <for_statement>
	| <return_statement>

<return_statement> ::=
	"return" <expression> ';'

<compound_statement> ::=
	'{' '}'
	| '{' <statement_list> '}'

<statement_list> ::=
	<statement>
	| <statement_list> <statement>

<assign_statement> ::=
	<variable> '=' <expression>
	| <variable> "~=" <expression>
	| <variable> "++"
	| <variable> "--"
	| <variable> "+=" <expression>
	| <variable> "-=" <expression>
	| "const" <identifier> '=' <expression>
	| "param" <identifier> '=' <expression>

<ifelse_statement> ::=
	"if" '(' <expression> ')' <statement> %<prec> "then"
	| "if" '(' <expression> ')' <statement> "else" <statement>

<for_statement> ::=
	"for" '(' <arguments> ')' <statement>

<variable> ::=
	<identifier>
	| '$' <identifier>

<expression> ::=
	"true"
	| "false"
	| "undef"
	| <variable>
	| <expression> '.' <identifier>
	| <string>
	| <number>
	| <number> <plus_minus> <expression>
	| <number> '[' <expression> ']'
	| <number> '[' <expression> ',' <expression> ']'
	| '<' <expression> ',' <expression> ',' <expression> ',' <expression> '>'
	| '|' <expression> '|'
	| <expression> '^' <expression>
	| <expression> '*' <expression>
	| <expression> '~' <expression>
	| <expression> ".*" <expression>
	| <expression> '/' <expression>
	| <expression> "./" <expression>
	| <expression> "**" <expression>
	| <expression> '%' <expression>
	| <expression> '+' <expression>
	| <expression> '-' <expression>
	| <expression> '<' <expression>
	| <expression> "<=" <expression>
	| <expression> "==" <expression>
	| <expression> "!=" <expression>
	| <expression> ">=" <expression>
	| <expression> '>' <expression>
	| <expression> "&&" <expression>
	| <expression> "||" <expression>
	| <expression> "++"
	| <expression> "--"
	| '+' <expression>
	| '-' <expression>
	| '!' <expression>
	| '(' <expression> ')'
	| <expression> '?' <expression> ':' <expression>
	| <invocation>
	| <indexable>

<indexable> ::=
	'[' <expression> ':' <expression> ']'
	| '[' <expression> ':' <expression> ':' <expression> ']'
	| '[' <vector_expression> <optional_commas> ']'
	| <variable> '[' <expression> ']'
	| <indexable> '[' <expression> ']'

<invocation> ::=
	<identifier> "::" <invocation>
	| <identifier> '(' <arguments> ')'

<vector_expression> ::=
	<empty>
	| <expression>
	| <vector_expression> ',' <optional_commas> <expression>

<parameters> ::=
	<empty>
	| <parameter>
	| <parameters> ',' <parameter>

<parameter> ::=
	<identifier>
	| <identifier> '=' <expression>
	| <identifier> ':' "undef" '=' <expression>
	| <identifier> ':' "identifier" '=' <expression>

<compound_instance> ::=
	<compound_statement>
	| <ifelse_statement>
	| <for_statement>
	| <module_instance>

<module_instance> ::=
	<single_instance> ';'
	| <single_instance> <compound_instance>

<single_instance> ::=
	<identifier> "::" <single_instance>
	| <identifier> '(' <arguments> ')'
	| <identifier> '$' '(' <arguments> ')'
	| '!' <single_instance>
	| '#' <single_instance>
	| '%' <single_instance>
	| '*' <single_instance>

<arguments> ::=
	<empty>
	| <argument>
	| <arguments> ',' <optional_commas> <argument>

<optional_commas> ::=
	<empty>
	| ',' <optional_commas>

<argument> ::=
	<expression>
	| <variable> '=' <expression>

